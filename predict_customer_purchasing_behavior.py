# -*- coding: utf-8 -*-
"""Predict Customer Purchasing Behavior

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/predict-customer-purchasing-behavior-af505d43-0243-4959-a139-390616da4e6d.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20241020/auto/storage/goog4_request%26X-Goog-Date%3D20241020T113850Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3Db4eb8f2c6b1688f755d3ef7bf17f6a98c39e0dab56234b2b3b20a46fa116ee7dcc11b41fea03490a8a1c51108b40f482a6c7d4f633d050c3fcbbc9a6399f77fb7c81be5e0085bdd2e390f19b40ea53bd9cbaab3107b74869c4d3b2d4ad8dd08fe89406b9efbcfb863f2b0c1f0711ee0f4d317901f0a008caaf82c6736a37c423db777bba4884b6e147d289c56918aa4032313f3df6ee298ba21b66beb7ec463f1cf1020b2c234f2003a6302bfd0d34c17d19278efc88db42f6c5ed0095378952d57db6472b2463833ff0208754ac223d60dde422b1cdcfa8421b835c36af7349f6899b69506ad70193653cbfcb55e077954979e4847147526e62422bac02af48
"""

import pandas as pd

# Load the dataset
file_path = '/content/Coffee Shop Sales.xlsx'
data = pd.read_excel(file_path)

# Display the first few rows and summary information
data.info()

"""## Data Exploration and Cleaning"""

# Checking for missing values
missing_values = data.isnull().sum()

# Exploring the distribution of key features
transaction_qty_distribution = data['transaction_qty'].describe()
unit_price_distribution = data['unit_price'].describe()

missing_values, transaction_qty_distribution, unit_price_distribution

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import classification_report

# Feature engineering: create a binary target variable
data['large_order'] = (data['transaction_qty'] > 1).astype(int)

# Selecting features for the model
features = ['store_id', 'unit_price', 'product_id']
X = data[features]
y = data['large_order']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardizing the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Training the models
# Logistic Regression
logreg = LogisticRegression(random_state=42)
logreg.fit(X_train_scaled, y_train)
y_pred_logreg = logreg.predict(X_test_scaled)

# Random Forest Classifier
rf = RandomForestClassifier(random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

# Gradient Boosting Classifier
gb = GradientBoostingClassifier(random_state=42)
gb.fit(X_train, y_train)
y_pred_gb = gb.predict(X_test)

# Generating classification reports
logreg_report = classification_report(y_test, y_pred_logreg)
rf_report = classification_report(y_test, y_pred_rf)
gb_report = classification_report(y_test, y_pred_gb)

logreg_report, rf_report, gb_report

"""This analysis highlights the potential for predictive modeling to understand customer behavior in a coffee shop setting. By implementing the Random Forest model, the business can better anticipate customer needs and optimize inventory and marketing strategies."""